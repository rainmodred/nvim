{
  "console.log()": {
    "scope": "typescript,javascript,typescriptreact,javascriptreact",
    "prefix": "clog",
    "body": [
      "console.log(${1})"
    ],
    "description": "console.log()"
  },
  "console.log1()": {
    "scope": "typescript,javascript,typescriptreact,javascriptreact",
    "prefix": "clogg",
    "body": [
      "console.log('${1}:', ${1})"
    ],
    "description": "console.log()"
  },
  "reactFunctionalComponent": {
    "prefix": "rfc",
    "body": [
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system"
  },
  "reactTSFunctionalComponent": {
    "prefix": "rfct",
    "body": [
      "interface ${1:${TM_FILENAME_BASE}}Props {}",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}({}:${1:${TM_FILENAME_BASE}}): JSX.Element {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$0",
      "\t\t</div>",
      "\t)",
      "}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system"
  },
  "useState": {
    "scope": "typescript,javascript,typescriptreact,javascriptreact",
    "prefix": "ust",
    "body": [
      "const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2);"
    ],
    "description": "useState with proper camel casing for setter function name."
  },
  "useEffect": {
    "scope": "typescript,javascript,typescriptreact,javascriptreact",
    "prefix": "usf",
    "body": [
      "useEffect(() => {$1},[$2])"
    ],
    "description": "use effect"
  },
  "css modules": {
    "scope": "typescript,javascript,typescriptreact,javascriptreact",
    "prefix": "cssm",
    "body": [
      "import styles from './${TM_FILENAME_BASE}.module.css';"
    ],
    "description": "css modules"
  },
  "sleep": {
    "scope": "typescript,javascript,typescriptreact,javascriptreact",
    "prefix": "sleep",
    "body": [
      "await new Promise(res => setTimeout(res, 1000));"
    ]
  }
}
